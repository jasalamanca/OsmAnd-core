diff --git a/src/core/SkAdvancedTypefaceMetrics.cpp b/src/core/SkAdvancedTypefaceMetrics.cpp
index c7ed34d..d1e8e58 100644
--- a/src/core/SkAdvancedTypefaceMetrics.cpp
+++ b/src/core/SkAdvancedTypefaceMetrics.cpp
@@ -12,6 +12,15 @@
 
 SK_DEFINE_INST_COUNT(SkAdvancedTypefaceMetrics)
 
+//OSMAND{
+// On WindowsPhone targets, use FreeType library with own font
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#   undef SK_BUILD_FOR_WIN
+#   define SK_BUILD_FOR_UNIX
+#	define generic _generic_renamed_due_to_winrt_reserved_word
+#endif
+//}OSMAND
+
 #if defined(SK_BUILD_FOR_WIN)
 #include <dwrite.h>
 #endif
@@ -22,6 +31,12 @@ struct FT_FaceRec;
 typedef struct FT_FaceRec_* FT_Face;
 #endif
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	undef generic
+#endif
+//}OSMAND
+
 #ifdef SK_BUILD_FOR_MAC
 #import <ApplicationServices/ApplicationServices.h>
 #endif
diff --git a/src/ports/SkFontHost_FreeType.cpp b/src/ports/SkFontHost_FreeType.cpp
index 8d6c4d0..962b9e9 100644
--- a/src/ports/SkFontHost_FreeType.cpp
+++ b/src/ports/SkFontHost_FreeType.cpp
@@ -28,7 +28,18 @@
 #if defined(SK_CAN_USE_DLOPEN)
 #include <dlfcn.h>
 #endif
+
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	define generic _generic_renamed_due_to_winrt_reserved_word
+#   if defined(ERROR)
+#       undef ERROR
+#   endif
+#endif
+//}OSMAND
+
 #include <ft2build.h>
+
 #include FT_FREETYPE_H
 #include FT_OUTLINE_H
 #include FT_SIZES_H
@@ -58,6 +69,12 @@
 #include <freetype/ftsynth.h>
 #endif
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	undef generic
+#endif
+//}OSMAND
+
 //#define ENABLE_GLYPH_SPEW     // for tracing calls
 //#define DUMP_STRIKE_CREATION
 
diff --git a/src/ports/SkFontHost_FreeType_common.cpp b/src/ports/SkFontHost_FreeType_common.cpp
index 2c48684..633d11c 100644
--- a/src/ports/SkFontHost_FreeType_common.cpp
+++ b/src/ports/SkFontHost_FreeType_common.cpp
@@ -11,12 +11,27 @@
 #include "SkFontHost_FreeType_common.h"
 #include "SkPath.h"
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	define generic _generic_renamed_due_to_winrt_reserved_word
+#   if defined(ERROR)
+#       undef ERROR
+#   endif
+#endif
+//}OSMAND
+
 #include <ft2build.h>
 #include FT_OUTLINE_H
 #include FT_BITMAP_H
 // In the past, FT_GlyphSlot_Own_Bitmap was defined in this header file.
 #include FT_SYNTHESIS_H
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	undef generic
+#endif
+//}OSMAND
+
 static FT_Pixel_Mode compute_pixel_mode(SkMask::Format format) {
     switch (format) {
         case SkMask::kBW_Format:
diff --git a/src/ports/SkFontHost_FreeType_common.h b/src/ports/SkFontHost_FreeType_common.h
index c0f2dc7..c3362eb 100644
--- a/src/ports/SkFontHost_FreeType_common.h
+++ b/src/ports/SkFontHost_FreeType_common.h
@@ -13,9 +13,24 @@
 #include "SkScalerContext.h"
 #include "SkTypeface.h"
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#   define generic _generic_renamed_due_to_winrt_reserved_word
+#   if defined(ERROR)
+#       undef ERROR
+#   endif
+#endif
+//}OSMAND
+
 #include <ft2build.h>
 #include FT_FREETYPE_H
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#   undef generic
+#endif
+//}OSMAND
+
 #ifdef SK_DEBUG
     #define SkASSERT_CONTINUE(pred)                                                         \
         do {                                                                                \
diff --git a/src/ports/SkThread_win.cpp b/src/ports/SkThread_win.cpp
index 708db24..ad6e8bd 100644
--- a/src/ports/SkThread_win.cpp
+++ b/src/ports/SkThread_win.cpp
@@ -9,6 +9,15 @@
 #include <intrin.h>
 #include "SkThread.h"
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+    // Since WindowsPhone8 does not support old Win32 Threads API, we'll use wrapper
+#   include "../../../wp8-win32-threads/ThreadEmulation.h"
+    using namespace ThreadEmulation;
+#   define InitializeCriticalSection(cs) InitializeCriticalSectionEx((cs), 0, CRITICAL_SECTION_NO_DEBUG_INFO)
+#endif
+//}OSMAND
+
 //MSDN says in order to declare an interlocked function for use as an
 //intrinsic, include intrin.h and put the function in a #pragma intrinsic
 //directive.
diff --git a/src/utils/SkCondVar.cpp b/src/utils/SkCondVar.cpp
index 5d001c0..37e458d 100644
--- a/src/utils/SkCondVar.cpp
+++ b/src/utils/SkCondVar.cpp
@@ -7,6 +7,15 @@
 
 #include "SkCondVar.h"
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+    // Since WindowsPhone8 does not support old Win32 Threads API, we'll use wrapper
+#   include "../../../wp8-win32-threads/ThreadEmulation.h"
+    using namespace ThreadEmulation;
+#   define InitializeCriticalSection(cs) InitializeCriticalSectionEx((cs), 0, CRITICAL_SECTION_NO_DEBUG_INFO)
+#endif
+//}OSMAND
+
 SkCondVar::SkCondVar() {
 #ifdef SK_USE_POSIX_THREADS
     pthread_mutex_init(&fMutex, NULL /* default mutex attr */);
diff --git a/src/utils/SkOSFile.cpp b/src/utils/SkOSFile.cpp
index 0a40375..a95d8e4 100644
--- a/src/utils/SkOSFile.cpp
+++ b/src/utils/SkOSFile.cpp
@@ -30,6 +30,13 @@ SkString SkOSPath::SkBasename(const char* fullPath) {
 
 #ifdef SK_BUILD_FOR_WIN
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+	// Since WindowsPhone8 misses a lot of non-*Ex() API calls, wrap them into *Ex()
+#   include "../../../wp8-functions-replacements.h"
+#endif
+//}OSMAND
+
 static uint16_t* concat_to_16(const char src[], const char suffix[])
 {
     size_t  i, len = strlen(src);
diff --git a/src/utils/SkThreadUtils_win.cpp b/src/utils/SkThreadUtils_win.cpp
index a064d3b..2d9ed7a 100644
--- a/src/utils/SkThreadUtils_win.cpp
+++ b/src/utils/SkThreadUtils_win.cpp
@@ -10,6 +10,20 @@
 #include "SkThreadUtils.h"
 #include "SkThreadUtils_win.h"
 
+//OSMAND{
+#if defined(_WIN32) && defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+    // Since WindowsPhone8 does not support old Win32 Threads API, we'll use wrapper
+#   include "../../../wp8-win32-threads/ThreadEmulation.h"
+    using namespace ThreadEmulation;
+
+    // Since WindowsPhone8 does not support many of Win32 Threading API, use stubs and just hope
+#   include "../../../wp8-threading-stubs.h"
+
+	// Since WindowsPhone8 misses a lot of non-*Ex() API calls, wrap them into *Ex()
+#   include "../../../wp8-functions-replacements.h"
+#endif
+//}OSMAND
+
 SkThread_WinData::SkThread_WinData(SkThread::entryPointProc entryPoint, void* data)
     : fHandle(NULL)
     , fParam(data)
