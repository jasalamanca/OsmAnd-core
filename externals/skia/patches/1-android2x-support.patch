--- upstream.original/src/ports/SkFontConfigParser_android.cpp	2013-09-27 17:22:47.730918700 +0300
+++ upstream.patched/src/ports/SkFontConfigParser_android.cpp	2013-09-27 18:28:40.875534400 +0300
@@ -270,6 +270,91 @@ void SkFontConfigParser::GetFontFamilies
         fallbackFonts[i]->fIsFallbackFont = true;
         *fontFamilies.append() = fallbackFonts[i];
     }
+
+    //OSMAND{
+    //===============================================================================
+    // Below is addition to use new SKIA library on old Android systems
+    // Used code from latest SKIA in Android 2.x branch
+    //===============================================================================
+    if( fontFamilies.count() == 0 ) {
+        struct FontInitRec {
+            const char*         fFileName;
+            const char* const*  fNames;     // null-terminated list
+        };
+
+        static const char* gSansNames[] = {
+            "sans-serif", "arial", "helvetica", "tahoma", "verdana", NULL
+        };
+
+        static const char* gSerifNames[] = {
+            "serif", "times", "times new roman", "palatino", "georgia", "baskerville",
+            "goudy", "fantasy", "cursive", "ITC Stone Serif", NULL
+        };
+
+        static const char* gMonoNames[] = {
+            "monospace", "courier", "courier new", "monaco", NULL
+        };
+
+        // deliberately empty, but we use the address to identify fallback fonts
+        static const char* gFBNames[] = { NULL };
+
+        /*  Fonts must be grouped by family, with the first font in a family having the
+            list of names (even if that list is empty), and the following members having
+            null for the list. The names list must be NULL-terminated
+        */
+        static const FontInitRec gSystemFonts[] = {
+            { "DroidSans.ttf",              gSansNames  },
+            { "DroidSans-Bold.ttf",         NULL        },
+            { "DroidSerif-Regular.ttf",     gSerifNames },
+            { "DroidSerif-Bold.ttf",        NULL        },
+            { "DroidSerif-Italic.ttf",      NULL        },
+            { "DroidSerif-BoldItalic.ttf",  NULL        },
+            { "DroidSansMono.ttf",          gMonoNames  },
+            /*  These are optional, and can be ignored if not found in the file system.
+                These are appended to gFallbackFonts[] as they are seen, so we list
+                them in the order we want them to be accessed by NextLogicalFont().
+             */
+            { "DroidSansArabic.ttf",        gFBNames    },
+            { "DroidSansHebrew.ttf",        gFBNames    },
+            { "DroidSansThai.ttf",          gFBNames    },
+            { "MTLmr3m.ttf",                gFBNames    }, // Motoya Japanese Font
+            { "MTLc3m.ttf",                 gFBNames    }, // Motoya Japanese Font
+            { "DroidSansJapanese.ttf",      gFBNames    },
+            { "DroidSansFallback.ttf",      gFBNames    }
+        };
+
+        const FontInitRec* rec = gSystemFonts;
+        FontFamily* newFontFamily = NULL;
+        for (size_t i = 0; i < SK_ARRAY_COUNT(gSystemFonts); i++) {
+            // Marker that we're in the beginning of a new family
+            if (rec[i].fNames != NULL) {
+                if(newFontFamily != NULL)
+                    *fontFamilies.append() = newFontFamily;
+                newFontFamily = new FontFamily();
+                newFontFamily->order = -1;
+            }
+
+            // Append file name
+            FontFileInfo* newFileInfo = new FontFileInfo();
+            newFileInfo->fFileName = rec[i].fFileName;
+            *(newFontFamily->fFontFiles.append()) = newFileInfo;
+
+            // Append names
+            if(rec[i].fNames != NULL) {
+                const char* const* names = rec[i].fNames;
+                while (*names) {
+                    *(newFontFamily->fNames.append()) = *names;
+                    names += 1;
+                }
+            }
+        }
+        if(newFontFamily != NULL)
+            *fontFamilies.append() = newFontFamily;
+    }
+    //===============================================================================
+    // End of addition
+    //===============================================================================
+    //}OSMAND
 }
 
 void SkFontConfigParser::GetTestFontFamilies(SkTDArray<FontFamily*> &fontFamilies,
